<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – Contribute</title>
    <link>https://oakestra.io/docs/contribute/</link>
    <description>Recent content in Contribute on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://oakestra.io/docs/contribute/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Contributor Python Code Style Guide</title>
      <link>https://oakestra.io/docs/contribute/python-style-guide/</link>
      <pubDate>Thu, 30 Nov 2023 15:56:27 +0200</pubDate>
      
      <guid>https://oakestra.io/docs/contribute/python-style-guide/</guid>
      <description>
        
        
        &lt;p&gt;The most important shared understanding should be that spending additional time on high-quality and easily comprehensable/readable code is absolutely worth it and crucial for success in software engineering.&lt;/p&gt;
&lt;p&gt;Recommended reads:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://bayrhammer-klaus.medium.com/you-spend-much-more-time-reading-code-than-writing-code-bc953376fe19&#34;&gt;https://bayrhammer-klaus.medium.com/you-spend-much-more-time-reading-code-than-writing-code-bc953376fe19&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://google.github.io/styleguide/pyguide.html#385-block-and-inline-comments&#34;&gt;https://google.github.io/styleguide/pyguide.html#385-block-and-inline-comments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://google.github.io/styleguide/pyguide.html#386-punctuation-spelling-and-grammar&#34;&gt;https://google.github.io/styleguide/pyguide.html#386-punctuation-spelling-and-grammar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Besides that, having and enforcing a common code style guide helps the team to stick to and create high quality code that is uniform, thus easier to get used to (onboarding) and comprehend. We want to help and make life easier for our individual team members and not enforce/punish them during their work.&lt;/p&gt;
&lt;p&gt;We want to follow industry standarts and not reinvent the wheel, thus we stick to &lt;strong&gt;PEP 8&lt;/strong&gt; (&lt;a href=&#34;https://peps.python.org/pep-0008/&#34;&gt;https://peps.python.org/pep-0008/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;To be able to follow this code style easier we utilize the following established production grade tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt; formatter (&lt;a href=&#34;https://github.com/psf/black&#34;&gt;https://github.com/psf/black&lt;/a&gt;) - syntax&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flake8&lt;/strong&gt; linter (&lt;a href=&#34;https://flake8.pycqa.org/en/latest/&#34;&gt;https://flake8.pycqa.org/en/latest/&lt;/a&gt;) - semantics&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isort&lt;/strong&gt; (&lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;https://github.com/PyCQA/isort&lt;/a&gt;) - import sorter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will quickly demonstrate how to install, use, and automate them in your terminal and IDE. For concrete use-case examples please have a look at the respective documentations, there you will find many examples.&lt;/p&gt;
&lt;h2 id=&#34;black&#34;&gt;&lt;em&gt;Black&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pip install black&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;terminal-usage&#34;&gt;Terminal Usage&lt;/h3&gt;
&lt;p&gt;You need to specify the files/directories black should run on. &lt;br&gt;
Black can target a single file or the entire root directory.&lt;/p&gt;
&lt;p&gt;On default Black will automatically try and resolve/adjust the target files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;black --line-length 100 .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you do not want to adjust the files but only see what black would change use the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;black --line-length 100 --check --diff --color .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The default line-length for these tools is below 100, from experience 100 is more developer-friendly&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;automating-black-in-vscode&#34;&gt;Automating Black in VSCode&lt;/h3&gt;
&lt;p&gt;These changes will allow you to apply Black formatting automatically every time you safe your changes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the official (from Microsoft) &amp;ldquo;Black Formatter&amp;rdquo; extension.&lt;/li&gt;
&lt;li&gt;Open your VSCode Settings&lt;/li&gt;
&lt;li&gt;Activate &amp;ldquo;Editor: Format On Save&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Select &amp;ldquo;Black Formatter&amp;rdquo; for &amp;ldquo;Editor: Default Formatter&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;integrating-black-in-pycharm&#34;&gt;Integrating Black in PyCharm&lt;/h3&gt;
&lt;p&gt;There is a plugin for black:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/black_connect_marketplace.png&#34; alt=&#34;BlackConnect&#34;&gt;&lt;/p&gt;
&lt;p&gt;For it to work properly you need to do the following:
Read the plugin description carefully
Install &lt;code&gt;blackd&lt;/code&gt; via pip.&lt;/p&gt;
&lt;p&gt;Instead of  running black as a software locally it connects to a fast &amp;amp; lightweight remote server to run the formatting.&lt;/p&gt;
&lt;p&gt;You can connect to the server by running this command: &lt;code&gt;blackd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can then trigger the black formatting by pressing &amp;quot; &lt;code&gt;Alt + Shift + B&lt;/code&gt; &amp;ldquo;.&lt;/p&gt;
&lt;p&gt;You can also configure the following:&lt;/p&gt;
&lt;p&gt;Run black on file save &amp;amp; refactor:
&lt;img src=&#34;images/blackd_save.png&#34; alt=&#34;blackd_save&#34;&gt;
&lt;img src=&#34;images/blackd_settings.png&#34; alt=&#34;blackd_settings&#34;&gt;&lt;/p&gt;
&lt;p&gt;Further settings can be found here:
&lt;img src=&#34;images/balckd_settings_plus.png&#34; alt=&#34;balckd_settings_plus&#34;&gt;&lt;/p&gt;
&lt;p&gt;Make sure to change the Line length to 100.&lt;/p&gt;
&lt;p&gt;If you want the plugin to start the blackd connection on IDE startup make sure to provide the Path to your local blackd installation.&lt;/p&gt;
&lt;h2 id=&#34;flake8&#34;&gt;&lt;em&gt;Flake8&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Flake provides concrete custom errorcodes for found issues.
Feel free to look them up online to properly understand how to fix them. E.g. for the issue code F841
&lt;img src=&#34;images/flake8_online.png&#34; alt=&#34;Flake error online lookup&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;installation-1&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pip install flake8&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;terminal-usage-1&#34;&gt;Terminal Usage&lt;/h3&gt;
&lt;p&gt;Using flake8 is very similar to using Black.
Unlike Black however, flake8 cannot fix its found issues on its own because semantics are a lot more complex than syntax.&lt;/p&gt;
&lt;p&gt;Base command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flake8 --max-line-length=100 .&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;enabling-flake8-highlighting-in-vscode&#34;&gt;Enabling flake8 highlighting in VSCode&lt;/h3&gt;
&lt;p&gt;As already mentioned flake8 sadly cannot fix our logical issues for us, however it can point them out directly in the code by highlighting possible mistakes and when you hover over them it will point to a concrete so-called flake-error that can be looked up online to figure out how to fix it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/flake8_vscode_example.png&#34; alt=&#34;Example of flake8 VSCode highlighting&#34;&gt;&lt;/p&gt;
&lt;p&gt;Install the official (from Microsoft) &amp;ldquo;Flake8&amp;rdquo; extension.&lt;/p&gt;
&lt;h3 id=&#34;making-flake8-work-in-pycharm&#34;&gt;Making flake8 work in PyCharm&lt;/h3&gt;
&lt;p&gt;There is sadly no trivial way of including flake8 into PyCharm i.e. there is no plugin for it, however I have found the following resources that might help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.org/project/flake8-for-pycharm/&#34;&gt;https://pypi.org/project/flake8-for-pycharm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/tossmilestone/23139d870841a3d5cba2aea28da1a895&#34;&gt;https://gist.github.com/tossmilestone/23139d870841a3d5cba2aea28da1a895&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;isort&#34;&gt;&lt;em&gt;isort&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;installation-2&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pip install isort&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;terminal-usage-2&#34;&gt;Terminal Usage&lt;/h3&gt;
&lt;p&gt;isort behaves very similar to Black. It can automatically perform adjustments or run in &amp;ldquo;check-only&amp;rdquo; mode.&lt;/p&gt;
&lt;p&gt;To use isort to adjust files simply run this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;isort .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can run the following to check what isort would change:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;isort --check-only --diff --color .&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;automating-isort-in-vscode&#34;&gt;Automating isort in VSCode&lt;/h3&gt;
&lt;p&gt;Similar to Black&amp;rsquo;s extension the official (Microsoft) &amp;ldquo;isort&amp;rdquo; extension will automatically sort all your imports when you safe a file.&lt;/p&gt;
&lt;h3 id=&#34;isort-in-pycharm&#34;&gt;Isort in PyCharm&lt;/h3&gt;
&lt;p&gt;Similar to flake8 there is not native/trivial way of including isort into PyCharm yet. You can however configure the imports settings and adjust them to make them as similar to isort.
(Note: The screenshot only shows where to find the settings, it does not show recommended settings.)
&lt;img src=&#34;images/import_settings.png&#34; alt=&#34;import_settings&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Contribution Guide</title>
      <link>https://oakestra.io/docs/contribute/contribution-guide/</link>
      <pubDate>Mon, 17 Oct 2022 10:39:27 +0200</pubDate>
      
      <guid>https://oakestra.io/docs/contribute/contribution-guide/</guid>
      <description>
        
        
        &lt;h1 id=&#34;oakestra-contribution-guide&#34;&gt;Oakestra Contribution guide&lt;/h1&gt;
&lt;p&gt;Oakestra&amp;rsquo;s codebase is open-source on GitHub and open to &lt;strong&gt;external&lt;/strong&gt; contributors as well. The purpose of this guide is to help the developer contribute in such a way that both people directly involved in Okaestra and people outside the research group can follow what happens within the project.&lt;/p&gt;
&lt;h2 id=&#34;issues&#34;&gt;Issues&lt;/h2&gt;
&lt;p&gt;Each contribution starts from an issue on the corresponding repository. E.g., Are you willing to update the front end? Open an issue on the dashboard repository.&lt;/p&gt;
&lt;p&gt;The issue can be of two kinds: &lt;strong&gt;Proposal&lt;/strong&gt; or &lt;strong&gt;Bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Template for &lt;strong&gt;Proposal&lt;/strong&gt; issues:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&#34;short&#34;&gt;Short&lt;/h1&gt;
&lt;p&gt;Short description of what you&amp;rsquo;re proposing. Max 2 lines. Highlight if this is something new or maybe you&amp;rsquo;re willing to change some specific behavior.&lt;/p&gt;
&lt;h1 id=&#34;proposal&#34;&gt;Proposal&lt;/h1&gt;
&lt;p&gt;Description of the modification you&amp;rsquo;re proposing. You can have references, links, and images. Please be very specific here. External contributors must be able to understand the context and the goal of the proposal.&lt;/p&gt;
&lt;h1 id=&#34;ratio&#34;&gt;Ratio&lt;/h1&gt;
&lt;p&gt;Short description of why this is important&lt;/p&gt;
&lt;h1 id=&#34;impact&#34;&gt;Impact&lt;/h1&gt;
&lt;p&gt;Describe the components that potentially need to be touched. E.g., Root service manager, Cluster scheduler, etc.&lt;/p&gt;
&lt;h1 id=&#34;development-time&#34;&gt;Development time&lt;/h1&gt;
&lt;p&gt;The expected time required to complete the development of this proposal&lt;/p&gt;
&lt;h1 id=&#34;status&#34;&gt;Status&lt;/h1&gt;
&lt;p&gt;Describe the current status of this proposal. E.g., looking for feedback, searching for a solution, development, and testing. Try to be concise but descriptive.&lt;/p&gt;
&lt;h1 id=&#34;checklist&#34;&gt;Checklist&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Discussed&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Documented&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implemented&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tested&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Template for &lt;strong&gt;Bug&lt;/strong&gt; issues:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&#34;short-1&#34;&gt;Short&lt;/h1&gt;
&lt;p&gt;Short description of the bug you noticed.&lt;/p&gt;
&lt;h1 id=&#34;proposal-1&#34;&gt;Proposal&lt;/h1&gt;
&lt;p&gt;Deeper description of the bug.&lt;/p&gt;
&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;
&lt;p&gt;Eventually, propose a solution.&lt;/p&gt;
&lt;h1 id=&#34;status-1&#34;&gt;Status&lt;/h1&gt;
&lt;p&gt;Describe the current status of this proposal. E.g., looking for feedback, searching for a solution, development, testing. Try to be concise but descriptive&lt;/p&gt;
&lt;h1 id=&#34;checklist-1&#34;&gt;Checklist&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Discussed&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Solved&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Tested&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;issue-names&#34;&gt;Issue names&lt;/h2&gt;
&lt;p&gt;Try to be concise and informative. Here some good ✅ and bad ❌ examples to give you an idea.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scheduling  ❌&lt;/li&gt;
&lt;li&gt;Integration of LDA to Cluster Scheduler ✅&lt;/li&gt;
&lt;li&gt;Frontend edit ❌&lt;/li&gt;
&lt;li&gt;Frontend cluster management panel ✅&lt;/li&gt;
&lt;li&gt;I think we need to replace the login token with a new JWT token ❌&lt;/li&gt;
&lt;li&gt;JWT API authentication ✅&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;contribution-steps&#34;&gt;Contribution steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open an Issue or Pick one&lt;/li&gt;
&lt;li&gt;Assign it to yourself, or ask for it.&lt;/li&gt;
&lt;li&gt;Fork the develop branch and detach a branch named after the issue&lt;/li&gt;
&lt;li&gt;When the issue is solved, tested and discussed in your fork, propose a PR towards the develop branch. Don&amp;rsquo;t forget to link the PR to the issue using the proper &lt;a href=&#34;https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue&#34;&gt;keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If necessary, update the &lt;a href=&#34;https://github.com/oakestra/documentation&#34;&gt;documentation&lt;/a&gt; as well using the same procedure&lt;/li&gt;
&lt;li&gt;Make sure that the PR passes all the automated tests.&lt;/li&gt;
&lt;li&gt;Add the maintainers as Reviewers.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t disappear, try to stay active in the discussion section until required.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;multi-repo-contributions&#34;&gt;Multi-repo contributions&lt;/h2&gt;
&lt;p&gt;The codebase is split into multiple repositories. Sometimes a single contribution might need to span across some of them in parallel. This is where things get tricky.&lt;/p&gt;
&lt;p&gt;Contributions spanning multiple repositories are difficult to track and require careful management.&lt;/p&gt;
&lt;p&gt;Please open multiple issues, one for each repository, and cross-link them. Each issue discusses only the modification required on that specific repository but links to the issues embedding the work required elsewhere.&lt;/p&gt;
&lt;p&gt;As a general rule, is better to perform the merges in parallel.
Make sure to open the pull requests together and cross-link the other pull requests between them.&lt;/p&gt;
&lt;h2 id=&#34;your-work-into-issues&#34;&gt;Your work into Issues&lt;/h2&gt;
&lt;p&gt;Try to find out the single tasks of your workflow and open up the corresponding issues accordingly.
Breaking down the work into issues makes it easier to merge and test the features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;N.b.&lt;/strong&gt; Always assign the issue to yourself and maybe indicate if this is part of a specific milestone, thesis, or guided research.&lt;/p&gt;
&lt;h2 id=&#34;discuss-with-the-community&#34;&gt;Discuss with the community&lt;/h2&gt;
&lt;p&gt;With the growth in the interest for Oakestra, many people are onboarding. By collaborating on this project, you have the chance to ask for their ideas as well.&lt;/p&gt;
&lt;p&gt;Try to write the issues in a clear way so that anyone might be able to fit in and contribute.
Then keep an eye on the issue&amp;rsquo;s comment section and add the label &amp;ldquo;help needed&amp;rdquo; if required.&lt;/p&gt;
&lt;h2 id=&#34;versioning&#34;&gt;Versioning&lt;/h2&gt;
&lt;p&gt;The project version is written in the file &lt;code&gt;version.txt&lt;/code&gt;
Make sure to update this file accordingly.&lt;/p&gt;
&lt;p&gt;N.b. The versions are amanged only by this file. NEVER CREATE A VERSION TAG MANUALLY.&lt;/p&gt;
&lt;h2 id=&#34;release-images&#34;&gt;Release images&lt;/h2&gt;
&lt;p&gt;An accepted pull-request towards main creates a release TAG corresponding to the version in &lt;code&gt;version.txt&lt;/code&gt;.
The release images will be created automatically by the git workflows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a release tag exist already, will not be replaced. You need to increase the version number!&lt;/li&gt;
&lt;li&gt;If you get an artifact creation error, most likely the release was not yet created on github. Please create a new release for the new tag and re-run the failed jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;alpha-images&#34;&gt;Alpha images&lt;/h2&gt;
&lt;p&gt;An accepted pull-request towards develop creates an alpha TAG corresponding to the version in &lt;code&gt;version.txt&lt;/code&gt; with the &lt;code&gt;alpha-&lt;/code&gt; prefix. If the tag exists already, it will be updated.
The alpha images will be created automatically by the git workflows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you get an artifact creation error, most likely the release was not yet created on github. Please create a new alpha-release for the new tag and re-run the failed jobs.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Contributor Covenant Code of Conduct</title>
      <link>https://oakestra.io/docs/contribute/coc/</link>
      <pubDate>Tue, 09 Aug 2022 15:56:27 +0200</pubDate>
      
      <guid>https://oakestra.io/docs/contribute/coc/</guid>
      <description>
        
        
        &lt;h1 id=&#34;contributor-covenant-code-of-conduct&#34;&gt;Contributor Covenant Code of Conduct&lt;/h1&gt;
&lt;h2 id=&#34;our-pledge&#34;&gt;Our Pledge&lt;/h2&gt;
&lt;p&gt;In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to make participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, sex characteristics, gender identity and expression,
level of experience, education, socio-economic status, nationality, personal
appearance, race, religion, or sexual identity and orientation.&lt;/p&gt;
&lt;h2 id=&#34;our-standards&#34;&gt;Our Standards&lt;/h2&gt;
&lt;p&gt;Examples of behavior that contributes to creating a positive environment
include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using welcoming and inclusive language&lt;/li&gt;
&lt;li&gt;Being respectful of differing viewpoints and experiences&lt;/li&gt;
&lt;li&gt;Gracefully accepting constructive criticism&lt;/li&gt;
&lt;li&gt;Focusing on what is best for the community&lt;/li&gt;
&lt;li&gt;Showing empathy towards other community members&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples of unacceptable behavior by participants include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The use of sexualized language or imagery and unwelcome sexual attention or
advances&lt;/li&gt;
&lt;li&gt;Trolling, insulting/derogatory comments, and personal or political attacks&lt;/li&gt;
&lt;li&gt;Public or private harassment&lt;/li&gt;
&lt;li&gt;Publishing others&amp;rsquo; private information, such as a physical or electronic
address, without explicit permission&lt;/li&gt;
&lt;li&gt;Other conduct which could reasonably be considered inappropriate in a
professional setting&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;our-responsibilities&#34;&gt;Our Responsibilities&lt;/h2&gt;
&lt;p&gt;Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.&lt;/p&gt;
&lt;p&gt;Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.&lt;/p&gt;
&lt;h2 id=&#34;scope&#34;&gt;Scope&lt;/h2&gt;
&lt;p&gt;This Code of Conduct applies within all project spaces, and it also applies when
an individual is representing the project or its community in public spaces.
Examples of representing a project or community include using an official
project e-mail address, posting via an official social media account, or acting
as an appointed representative at an online or offline event. Representation of
a project may be further defined and clarified by project maintainers.&lt;/p&gt;
&lt;h2 id=&#34;enforcement&#34;&gt;Enforcement&lt;/h2&gt;
&lt;p&gt;Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at [INSERT EMAIL ADDRESS]. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.&lt;/p&gt;
&lt;p&gt;Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project&amp;rsquo;s leadership.&lt;/p&gt;
&lt;h2 id=&#34;attribution&#34;&gt;Attribution&lt;/h2&gt;
&lt;p&gt;This Code of Conduct is adapted from the &lt;a href=&#34;https://www.contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt;, version 1.4,
available at &lt;a href=&#34;https://www.contributor-covenant.org/version/1/4/code-of-conduct.html&#34;&gt;https://www.contributor-covenant.org/version/1/4/code-of-conduct.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For answers to common questions about this code of conduct, see
&lt;a href=&#34;https://www.contributor-covenant.org/faq&#34;&gt;https://www.contributor-covenant.org/faq&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
