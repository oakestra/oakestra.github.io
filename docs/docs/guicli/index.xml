<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>CLI &amp; Frontend on Oakestra</title>
        <link>https://oakestra.io/docs/guicli/</link>
        <description>Recent content in CLI &amp; Frontend on Oakestra</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 09 Aug 2022 15:56:27 +0200</lastBuildDate><atom:link href="https://oakestra.io/docs/guicli/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Features</title>
        <link>https://oakestra.io/docs/guicli/frontend/user/features/</link>
        <pubDate>Tue, 09 Aug 2022 15:56:27 +0200</pubDate>
        
        <guid>https://oakestra.io/docs/guicli/frontend/user/features/</guid>
        <description>&lt;h1 id=&#34;features&#34;&gt;Features&lt;/h1&gt;
&lt;p&gt;We have tried to build the dashboard as logically as possible.
Nevertheless, the most important functions of the dashboard are explained here.&lt;/p&gt;
&lt;p&gt;If you want to have a small overview of the dashboard just start a dashboard tour in the &lt;strong&gt;help section&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;login&#34;&gt;Login&lt;/h2&gt;
&lt;p&gt;You can easily log in to the dashboard with your username and password. If you don&amp;rsquo;t have a user account yet, ask the admin to create one for you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/gifs/login.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;gif-login&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;If you forgot your password you can reset it by clicking on the Forgot Password button, you will receive a mail with a link to create a new password.&lt;/p&gt;
&lt;h2 id=&#34;creating-an-application&#34;&gt;Creating an Application&lt;/h2&gt;
&lt;p&gt;To create a new application just click on the plus symbol in the application section on the left side.
Once you have pressed it, a dialog will open where you can specify the name, namespace and description of the application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/gifs/app.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;gif-create-application&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;view-status-of-a-service&#34;&gt;View Status of a Service&lt;/h2&gt;
&lt;p&gt;To view the detailed status of a service and read out current data such as CPU and memory consumption, simply click on the status and a dialog opens with the corresponding values.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/gifs/status.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;gif-view-status&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;delete-user&#34;&gt;Delete User&lt;/h2&gt;
&lt;p&gt;To create, edit or delete a user you have to go to the user management page. This page can be found on the top right when you click on the people icon.&lt;/p&gt;
&lt;p&gt;In this example an existing user will be deleted.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/gifs/delete.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;gif-delete-user&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note that the user management page can only be accessed by an admin.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-service&#34;&gt;Create Service&lt;/h3&gt;
&lt;p&gt;To create a new service we click on the &lt;code&gt;create service&lt;/code&gt; button.
We will be redirected to another page where many attributes can be defined.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/gifs/service.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;gif-add-service&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;In this example only a few attributes are given, in the following you will find a complete list of all attributes with a short description.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Work in progress. Add description of all attributes&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;create-connections-between-services&#34;&gt;Create connections between services&lt;/h2&gt;
&lt;p&gt;There are several ways to create a connection between two services.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A connection can be created in the previously shown input form.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A connection can also be created using the connection graph.
For this we connect two services simply by drag and drop.
A dialog will open where you can specify the requirements for the connection.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This gif shows the creation of a connection with the connection graph:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/gifs/connection.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;gif-add-connection&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;There are many more functions which are not described here.
In the future this page will be extended and more functions will be added.
If you still have difficulties with a function contact the EdgeIO team.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Front end access control</title>
        <link>https://oakestra.io/docs/guicli/frontend/user/access-control/</link>
        <pubDate>Tue, 09 Aug 2022 15:56:27 +0200</pubDate>
        
        <guid>https://oakestra.io/docs/guicli/frontend/user/access-control/</guid>
        <description>&lt;h1 id=&#34;access-control&#34;&gt;Access control&lt;/h1&gt;
&lt;p&gt;Once Dashboard is installed and accessible we can focus on configuring access control to the resources for users.&lt;/p&gt;
&lt;p&gt;When the framework is started for the first time, an admin user is automatically created.
This admin user can be used to create additional users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Make sure that the Admin password is changed after the first start of the System Manager.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;EdgeIO supports currently only one way of authenticating and authorizing users.
Authorization is handled by the Root Orchestrator (System Manager) API server.
The Dashboard only acts as a proxy and passes all auth information to it.
In case of forbidden access corresponding warnings will be displayed in the Dashboard.&lt;/p&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;EdgeIO Dashboard supports currently only this way of authenticating users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Username/password&lt;/strong&gt; that can be used on Dashboard login view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a user is logged in, tokens in the authorization header are used to authenticate the user.&lt;/p&gt;
&lt;h3 id=&#34;authorization-header&#34;&gt;Authorization header&lt;/h3&gt;
&lt;p&gt;Using authorization header is the only way to make Dashboard act as a specific user.
Note that there are some risks if plain HTTP is used since the traffic is vulnerable to &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MITM attacks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make Dashboard use authorization header you simply need to pass &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt; in every request to Dashboard.
This is currently done automatically with an HTTP interceptor.&lt;/p&gt;
&lt;p&gt;To quickly test it check out &lt;a class=&#34;link&#34; href=&#34;https://chrome.google.com/webstore/detail/requestly-redirect-url-mo/mdnleldcmiljblolnjhpnblkcekpdkpa&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Requestly&lt;/a&gt; Chrome browser plugin that allows to manually modify request headers.&lt;/p&gt;
&lt;h2 id=&#34;admin-privileges&#34;&gt;Admin privileges&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Make sure that you know what you are doing before proceeding. Granting admin privileges to Dashboard&amp;rsquo;s Service Account might be a security risk.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Frontend</title>
        <link>https://oakestra.io/docs/guicli/frontend/frontend/</link>
        <pubDate>Tue, 09 Aug 2022 15:56:27 +0200</pubDate>
        
        <guid>https://oakestra.io/docs/guicli/frontend/frontend/</guid>
        <description>&lt;h1 id=&#34;user-guide&#34;&gt;User Guide&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;user/installation.md&#34; &gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;user/access-control.md&#34; &gt;Access control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;user/features.md&#34; &gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;developer-guide&#34;&gt;Developer Guide&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;developer/getting-started.md&#34; &gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;developer/architecture.md&#34; &gt;Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Frontend architecture</title>
        <link>https://oakestra.io/docs/guicli/frontend/developer/architecture/</link>
        <pubDate>Tue, 09 Aug 2022 15:56:27 +0200</pubDate>
        
        <guid>https://oakestra.io/docs/guicli/frontend/developer/architecture/</guid>
        <description>&lt;h1 id=&#34;architecture&#34;&gt;Architecture&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; It reflects only the structure as of the current version and may not reflect the structure of
future versions.&lt;/p&gt;
&lt;p&gt;EdgeIO Dashboard project consists of two main components. They are called here the
frontend and the backend.&lt;/p&gt;
&lt;p&gt;The frontend is a single page web application that runs in a browser. It fetches all its
business data from the backend using standard HTTP methods. It does not implement business logic,
it only presents fetched data and sends requests to the backend for actions.&lt;/p&gt;
&lt;p&gt;The backend is the extended version of the Root Orchestrator, especially the System Manager.
It can run anywhere as long the frontend can access the System Manager.
The figure below outlines the architecture of the project:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/res/architecture.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Architecture Overview&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;backend&#34;&gt;Backend&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Written in &lt;a class=&#34;link&#34; href=&#34;https://www.python.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Code is stored in the &lt;code&gt;edgeio&lt;/code&gt; repository.
&lt;ul&gt;
&lt;li&gt;currently only the develop-frontend branch supports the user interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;frontend&#34;&gt;Frontend&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Written in &lt;a class=&#34;link&#34; href=&#34;https://www.typescriptlang.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TypeScript&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Using &lt;a class=&#34;link&#34; href=&#34;https://angular.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Angular&lt;/a&gt; along with &lt;a class=&#34;link&#34; href=&#34;https://material.angular.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Angular Material&lt;/a&gt; for components like cards, buttons etc.&lt;/li&gt;
&lt;li&gt;Code is stored in &lt;code&gt;src/app/&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Frontend makes calls to the API and renders received data. It also transforms some data on the client and provides visualizations for the user.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Frontend isntallation</title>
        <link>https://oakestra.io/docs/guicli/frontend/user/installation/</link>
        <pubDate>Tue, 09 Aug 2022 15:56:27 +0200</pubDate>
        
        <guid>https://oakestra.io/docs/guicli/frontend/user/installation/</guid>
        <description>&lt;p&gt;#Installation&lt;/p&gt;
&lt;p&gt;The following folders/files are required to install and launch the dashboard.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;dist&lt;/a&gt; folder:  contains the build dashboard&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;docker&lt;/a&gt; folder: contains all the required files for the Docker&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Dockerfile&lt;/a&gt;: configuration of the docker&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;docker-compose.yml&lt;/a&gt;: To start the docker and define the IP address of the System Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run &lt;code&gt;docker-compose up&lt;/code&gt; to start the Dashboard with docker compose.&lt;/p&gt;
&lt;p&gt;Now the dashboard is accessible on port 80.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Getting started with the frontend</title>
        <link>https://oakestra.io/docs/guicli/frontend/developer/getting-started/</link>
        <pubDate>Tue, 09 Aug 2022 15:56:27 +0200</pubDate>
        
        <guid>https://oakestra.io/docs/guicli/frontend/developer/getting-started/</guid>
        <description>&lt;h1 id=&#34;getting-started&#34;&gt;Getting started&lt;/h1&gt;
&lt;p&gt;This document describes how to setup your development environment.&lt;/p&gt;
&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Make sure the following software is installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 2.13.2+ (&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/downloads&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;installation manual&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Docker 1.13.1+ (&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;installation manual&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Node.js 16+ and npm 8+ (&lt;a class=&#34;link&#34; href=&#34;https://github.com/creationix/nvm#usage&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;installation with nvm&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repository&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/edgeIO/dashboard.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Install the dependencies:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;running-the-okakestra-framework&#34;&gt;Running the Okakestra Framework&lt;/h2&gt;
&lt;p&gt;To be able to log in to the dashboard and test all functions, at least the System Manager and MongoDB must be started.
How to start them is described in the README of the &lt;code&gt;edgeio&lt;/code&gt; repository.&lt;/p&gt;
&lt;h2 id=&#34;serving-dashboard-for-development&#34;&gt;Serving Dashboard for Development&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In the background, &lt;code&gt;npm start&lt;/code&gt; starts the &lt;code&gt;angular&lt;/code&gt; development server. By default, the server starts on &lt;code&gt;localhost:4200&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once the angular server starts, it takes some time to pre-compile all assets before serving them. By default, the angular development server watches for file changes and will update accordingly.&lt;/p&gt;
&lt;p&gt;As stated in the &lt;a class=&#34;link&#34; href=&#34;https://angular.io/guide/i18n#generate-app-versions-for-each-locale&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Angular documentation&lt;/a&gt;, i18n does not work in the development mode.
Follow &lt;a class=&#34;link&#34; href=&#34;#building-dashboard-for-production&#34; &gt;Building Dashboard for Production&lt;/a&gt; section to test this feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Due to the deployment complexities of i18n and the need to minimize rebuild time, the development server only supports localizing a single locale at a time. Setting the &amp;ldquo;localize&amp;rdquo; option to true will cause an error when using ng serve if more than one locale is defined. Setting the option to a specific locale, such as &amp;ldquo;localize&amp;rdquo;: [&amp;ldquo;fr&amp;rdquo;], can work if you want to develop against a specific locale (such as fr).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;building-dashboard-for-production&#34;&gt;Building Dashboard for Production&lt;/h2&gt;
&lt;p&gt;In the production environment you need the following files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dist&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-dist-folder&#34;&gt;1. dist folder:&lt;/h3&gt;
&lt;p&gt;The dashboard project can be built for production by using the following task:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm run build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The code is compiled, compressed, i18n support is enabled and debug support removed. The dashboard binary can be found in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt;
&lt;h3 id=&#34;2-docker-folder&#34;&gt;2. docker folder:&lt;/h3&gt;
&lt;p&gt;To use the environment variables of a Docker container in your Angular application we use the library &lt;a class=&#34;link&#34; href=&#34;https://www.npmjs.com/package/angular-server-side-configuration&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;angular-server-side-configuration&lt;/a&gt;. For any problems you can consult the readme of that repository.&lt;/p&gt;
&lt;p&gt;This folder contains the angular-environment folder, the entrypoint.sh file and a Nginx configuration file.&lt;/p&gt;
&lt;p&gt;In the angular-environment folder is the code that needs to run every time you start your Docker container.
It contains a package.json file that has a dependency on angular-server-side-configuration and runs the main.js file.&lt;/p&gt;
&lt;p&gt;The entrypoint.sh script is used to install NodeJS and the angular-server-side-configuration library. After that, it runs the main.js script to set the environment variables and at the end, all NodeJS-related stuff is deleted and the Nginx server can be started with the defined settings in the configuration file.&lt;/p&gt;
&lt;h3 id=&#34;3-dockerfile&#34;&gt;3. dockerfile&lt;/h3&gt;
&lt;p&gt;Copies all relevant files into the container and executes the &lt;code&gt;entrypoint.sh&lt;/code&gt; script&lt;/p&gt;
&lt;h3 id=&#34;4-docker-compose&#34;&gt;4. docker compose&lt;/h3&gt;
&lt;p&gt;To start the Docker service the Ip address of the system manager should be defined in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file. If the dashboard cannot reach the system manager, the user cannot log in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;API_ADDRESS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;IP:PORT &lt;span class=&#34;c1&#34;&gt;#ip and port of the system manager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;starting-the-dashboard&#34;&gt;Starting the dashboard&lt;/h2&gt;
&lt;p&gt;If you have all the above files, you can build and start the Dashboard using the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose.yml up –build -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
