<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> â€“ Dashboard</title>
    <link>https://oakestra.io/docs/dashboard/</link>
    <description>Recent content in Dashboard on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://oakestra.io/docs/dashboard/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Start your Dashboard</title>
      <link>https://oakestra.io/docs/dashboard/getting-started-dashboard/</link>
      <pubDate>Wed, 05 Oct 2022 09:56:27 +0200</pubDate>
      
      <guid>https://oakestra.io/docs/dashboard/getting-started-dashboard/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://oakestra.io/wiki-banner-help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Dashboard is a sophisticated web-based user interface for the Oakestra system.
It is designed to provide users with a comprehensive set of tools to deploy applications to a
Oakestra cluster, effectively manage cluster resources, and troubleshoot any issues that may arise.&lt;/p&gt;
&lt;p&gt;With the Dashboard, users can gain an insightful overview of the applications currently running on
their cluster. It allows them to create and modify individual services,
view the status of running services, and configure service-level agreements (SLAs) with an intuitive form.
This feature-rich interface also enables users to monitor the state of Oakestra resources within
their cluster and track any errors that may have occurred.&lt;/p&gt;
&lt;p&gt;In essence, the Dashboard empowers users to harness the full potential of the Oakestra system with
ease and efficiency, enabling them to achieve their goals and objectives in a
seamless and hassle-free manner.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You have a running Root Orchestrator.&lt;/li&gt;
&lt;li&gt;You can access the APIs at &lt;code&gt;&amp;lt;root-orch-ip&amp;gt;:10000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Make sure the following software is installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 2.13.2+ (&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;installation manual&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Docker 1.13.1+ (&lt;a href=&#34;https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/&#34;&gt;installation manual&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;0)&lt;/strong&gt; Clone the repository&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/oakestra/dashboard.git &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; dashboard
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Create a file that contains the environment variables&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;API_ADDRESS=&amp;lt;IP_of_the_system_manager_api&amp;gt;:10000&amp;#34;&lt;/span&gt; &amp;gt; .env
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; Run the dashboard&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker-compose up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;running-the-okakestra-framework&#34;&gt;Running the Okakestra Framework&lt;/h3&gt;
&lt;p&gt;To be able to log into the dashboard and test all functions, at least the System Manager and
MongoDB must be started.
How to start them is described in this WIKI &lt;a href=&#34;../../getstarted/get-started-cluster&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If these components were not started or the wrong IP address was configured, the login screen can be reached, but you cannot log in to the dashboard.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Access Control</title>
      <link>https://oakestra.io/docs/dashboard/access-control/</link>
      <pubDate>Wed, 05 Oct 2022 09:56:27 +0200</pubDate>
      
      <guid>https://oakestra.io/docs/dashboard/access-control/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://oakestra.io/wiki-banner-help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;access-control&#34;&gt;Access control&lt;/h2&gt;
&lt;p&gt;Upon successful installation and accessibility of the Dashboard, our attention can shift to configuring
access control to resources for various users.&lt;/p&gt;
&lt;p&gt;Upon launching the framework for the first time, an administrative user is automatically generated.
This administrative user can then be leveraged to create additional users and organizations within the system.&lt;/p&gt;
&lt;p&gt;Credentials for the admin user:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Username:&lt;/strong&gt; Admin&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Password:&lt;/strong&gt; Admin&lt;/p&gt;
&lt;p&gt;It is important to note that after the initial launch of the System Manager,
it is imperative to change the password for the Admin user as an added measure of security.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Oakestra supports currently only one way of authenticating and authorizing users.
Authorization is handled by the Root Orchestrator (System Manager) API server.
The Dashboard only acts as a proxy and passes all auth information to it.
In case of forbidden access corresponding warnings will be displayed in the Dashboard.&lt;/p&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;Oakestra Dashboard currently supports only the following method for authenticating users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Username/password&lt;/strong&gt; that can be used on the Dashboard login view.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once a user has successfully logged in, tokens in the authorization header are leveraged to authenticate the user.&lt;/p&gt;
&lt;h3 id=&#34;authorization-header&#34;&gt;Authorization Header&lt;/h3&gt;
&lt;p&gt;Using the authorization header is the only way to make Dashboard function as a specific user. However, it is worth noting that if plain HTTP is used, the traffic is vulnerable to &lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;&gt;MITM attacks&lt;/a&gt;, which could result in potential security risks.&lt;/p&gt;
&lt;p&gt;To enable Dashboard to utilize the authorization header, simply pass &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt; with every request made to Dashboard. Currently, this is automatically executed with an HTTP interceptor.&lt;/p&gt;
&lt;p&gt;To test this feature swiftly, try out the &lt;a href=&#34;https://chrome.google.com/webstore/detail/requestly-redirect-url-mo/mdnleldcmiljblolnjhpnblkcekpdkpa&#34;&gt;Requestly&lt;/a&gt; Chrome browser plugin that enables manual modification of request headers.&lt;/p&gt;
&lt;h2 id=&#34;organization-login&#34;&gt;Organization Login&lt;/h2&gt;
&lt;p&gt;If you want to log in to an organization you have to enter the organization name if there is no organization yet or if no organization is entered, you will be automatically logged in to the ROOT organization.&lt;/p&gt;
&lt;p&gt;Here you can see the login to the &lt;strong&gt;sampleOrga:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/orga-login.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Features</title>
      <link>https://oakestra.io/docs/dashboard/features/</link>
      <pubDate>Wed, 05 Oct 2022 09:56:27 +0200</pubDate>
      
      <guid>https://oakestra.io/docs/dashboard/features/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://oakestra.io/wiki-banner-help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;features&#34;&gt;Features&lt;/h1&gt;
&lt;p&gt;The user interface is still under development and therefore does not offer so many features yet.
However, we are working on it to support more and more features.
If you find ideas for new features or bugs post an issue in the &lt;a href=&#34;https://github.com/oakestra/dashboard&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;creating-an-application&#34;&gt;Creating an application&lt;/h2&gt;
&lt;p&gt;In Oakestra there is the principle of applications and services, within one application there can be several services and one user can create several applications.&lt;/p&gt;
&lt;p&gt;In order to create a service, an application must first be created.  This is very simple, you only need to specify the name, the namespace and an optional description.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/add-app.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creating-a-service&#34;&gt;Creating a service&lt;/h2&gt;
&lt;p&gt;To create a service, you can use the APIs as described &lt;a href=&#34;https://www.oakestra.io/docs/getstarted/get-started-app&#34;&gt;here&lt;/a&gt;.
Another option is to create a service with the dashboard,
which makes this process much easier.&lt;/p&gt;
&lt;p&gt;As described in other parts of the documentation,
an SLA definition (Service Level Agreement) must be created for the
creation of an application.
This can be done easily using the various input fields in the dashboard.&lt;/p&gt;
&lt;p&gt;To do this, first create an application or select the appropriate application in which a new service should be created.  Then you can create a service in this application by entering the various values in the form. The dashboard then creates the SLA provisioning descriptor
based on your input and sends it to the root orchestrator.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/create-service.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you already have other SLA configurations, you can upload this
configuration to the dashboard, and it will send everything to the root.&lt;/p&gt;
&lt;p&gt;Please note that the JSON file should have the following format.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
&amp;#34;microservices&amp;#34; : [
        {
          &amp;#34;microserviceID&amp;#34;: &amp;#34;&amp;#34;,
          &amp;#34;microservice_name&amp;#34;: &amp;#34;curl&amp;#34;,
          &amp;#34;microservice_namespace&amp;#34;: &amp;#34;test&amp;#34;,
          &amp;#34;virtualization&amp;#34;: &amp;#34;container&amp;#34;,
          &amp;#34;cmd&amp;#34;: [&amp;#34;sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tail -f /dev/null&amp;#34;],
          &amp;#34;memory&amp;#34;: 100,
          &amp;#34;vcpus&amp;#34;: 1,
          &amp;#34;vgpus&amp;#34;: 0,
          &amp;#34;vtpus&amp;#34;: 0,
          &amp;#34;bandwidth_in&amp;#34;: 0,
          &amp;#34;bandwidth_out&amp;#34;: 0,
          &amp;#34;storage&amp;#34;: 0,
          &amp;#34;code&amp;#34;: &amp;#34;docker.io/curlimages/curl:7.82.0&amp;#34;,
          &amp;#34;state&amp;#34;: &amp;#34;&amp;#34;,
          &amp;#34;port&amp;#34;: &amp;#34;9080&amp;#34;,
          &amp;#34;added_files&amp;#34;: []
        },
        {
          &amp;#34;microserviceID&amp;#34;: &amp;#34;&amp;#34;,
          &amp;#34;microservice_name&amp;#34;: &amp;#34;nginx&amp;#34;,
          &amp;#34;microservice_namespace&amp;#34;: &amp;#34;test&amp;#34;,
          &amp;#34;virtualization&amp;#34;: &amp;#34;container&amp;#34;,
          &amp;#34;cmd&amp;#34;: [],
          &amp;#34;memory&amp;#34;: 100,
          &amp;#34;vcpus&amp;#34;: 1,
          &amp;#34;vgpus&amp;#34;: 0,
          &amp;#34;vtpus&amp;#34;: 0,
          &amp;#34;bandwidth_in&amp;#34;: 0,
          &amp;#34;bandwidth_out&amp;#34;: 0,
          &amp;#34;storage&amp;#34;: 0,
          &amp;#34;code&amp;#34;: &amp;#34;docker.io/library/nginx:latest&amp;#34;,
          &amp;#34;state&amp;#34;: &amp;#34;&amp;#34;,
          &amp;#34;port&amp;#34;: &amp;#34;6080:80/tcp&amp;#34;,
          &amp;#34;addresses&amp;#34;: {
            &amp;#34;rr_ip&amp;#34;: &amp;#34;10.30.30.30&amp;#34;
          },
          &amp;#34;added_files&amp;#34;: []
        }
      ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The microservice array can then contain any number of service configurations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/sla-upload.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;service-details&#34;&gt;Service Details&lt;/h2&gt;
&lt;p&gt;Once a service has been created and deployed, the parts of an instance can be viewed. To do this, click on the arrow in the instance list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/details.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;roles&#34;&gt;Roles&lt;/h2&gt;
&lt;p&gt;After a successful login, the user receives a JWT token that authenticates the user.
The token contains the user&amp;rsquo;s roles and the organization ID in which the user is currently logged in.
We distinguish between the following different roles.&lt;/p&gt;
&lt;h3 id=&#34;admin&#34;&gt;Admin&lt;/h3&gt;
&lt;p&gt;The admin is created at the start of the root orchestrator. He can create new users, create organizations,
add users to organizations and change settings in the complete system.&lt;/p&gt;
&lt;h3 id=&#34;organization-admin&#34;&gt;Organization Admin&lt;/h3&gt;
&lt;p&gt;A user with this role is the admin of an organization he can add new users to the organization
and manage their roles within the organization.&lt;/p&gt;
&lt;h3 id=&#34;infrastructure-provider&#34;&gt;Infrastructure Provider&lt;/h3&gt;
&lt;p&gt;A user with this role can add resources that can then be used to deploy applications there.&lt;/p&gt;
&lt;h3 id=&#34;application-provider&#34;&gt;Application Provider&lt;/h3&gt;
&lt;p&gt;This is the default role of a user, he can create applications and services and manage them accordingly.&lt;/p&gt;
&lt;h2 id=&#34;user-management&#34;&gt;User Management&lt;/h2&gt;
&lt;p&gt;The admin can easily add a new user in the user management and assign him appropriate roles.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/create-user.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;organizations&#34;&gt;Organizations&lt;/h2&gt;
&lt;p&gt;An Organization in Oakestra is a fundamental unit designed to facilitate and enhance collaboration among team members.
It serves as a container for projects, applications, and resources, providing a structured and efficient
environment for collective work.
Within an organization, team members share a common space where they can
collaboratively develop, manage, and deploy applications.&lt;/p&gt;
&lt;p&gt;Key attributes of an Oakestra Organization include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Collaborative Space:&lt;/strong&gt; Organizations provide a dedicated space for team members to work together.
This shared environment ensures that all members have visibility into the applications and projects associated with the organization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access Control:&lt;/strong&gt; Members of an organization enjoy access to all applications
created within that organizational context.
This access control mechanism streamlines collaboration by allowing team members to contribute to shared projects seamlessly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Utilization:&lt;/strong&gt; The organization serves as a hub for resource management.
Team members can utilize the resources provided within the organization to deploy new services,
fostering an efficient and centralized approach to application development.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;root-organization&#34;&gt;Root Organization&lt;/h3&gt;
&lt;p&gt;When the root orchestrator is started for the first time, a root organization
is also created with the admin, and each user is automatically part of this root organization.
However, users can also be part of other organizations.
The root organization has specific properties.
Unlike other organizations, where a user can view all applications within the organization
and share resources, in the root organization,
only the applications that a user has created can be viewed.&lt;/p&gt;
&lt;h2 id=&#34;e-mail-configuration&#34;&gt;E-mail Configuration&lt;/h2&gt;
&lt;p&gt;The admin of Oakestra can configure an SMTP server in the settings.&lt;/p&gt;
&lt;p&gt;If no SMTP server is configured, the official Oakestra mail service can be used in the future.&lt;/p&gt;
&lt;p&gt;Currently, mails are sent in the following scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When creating a new user, the user receives a mail with the password previously set by the admin.&lt;/li&gt;
&lt;li&gt;When changing the password of a user&lt;/li&gt;
&lt;li&gt;And to reset the password of a user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If nothing is configured, no mails are sent and the admin must reset the password for the user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://oakestra.io/smtp.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; This feature is implemented in the frontend but not yet 100% in the backend and therefore might not work yet.
&lt;a href=&#34;https://github.com/oakestra/oakestra/issues/182&#34;&gt;Here&lt;/a&gt; you can see the GitHub issue for this feature.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
